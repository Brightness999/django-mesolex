"""
This is a script for testing the FSTs for normalizing orthographic and
isoglossic variation.

It can be run from the command line:


1) Testing if a given input would match a canonical/dictionary form:

    $ python nahuatl_fst_test.py match ahcotzicuini --dict_form ahkotsikwini -v -f -i
    'ahcotzicuini' Matched 'ahkotsikwini'

2) Generating all "lookup" forms from a given input form

    $ python nahuatl_fst_test.py generate tla:catl -v -f -i
    Words generated by 'tla:catl':
    takat
    takatl
    taka:t
    taka:tl
    ...

3) Generating a (not-exactly the most efficient, but more efficient than a
   list of words) regex from a trie constructed out of the list of generated
   forms:

    $ python nahuatl_fst_test.py pattern tla:catl -v -f -i
    t(?:a(?:\:ka(?:\:tl?|tl?)|ka(?:\:tl?|tl?))|la(?:\:ka(?:\:tl?|tl?)|ka(?:\:tl?|tl?)))

"""

import argparse
import attapply
from retrie.trie import Trie


def get_att_file(flex=True, isoglosses=False, vln=False):
    att_fn = 'nahuat/att/in2dic'
    if flex is True:
        att_fn += '_flex'
    if vln is True:
        att_fn += '_vln'
    if isoglosses is True:
        att_fn += '_iso'

    att_fn += '.att'

    return att_fn


def match(inp, dic, flex=False, isoglosses=False, vln=False):
    filename = get_att_file(flex=flex, isoglosses=isoglosses, vln=vln)
    t = attapply.ATTFST(filename)
    words = {w[0] for w in t.apply(inp)}
    return dic in words


def generate_forms(inp, flex=False, isoglosses=False, vln=False):
    filename = get_att_file(flex=flex, isoglosses=isoglosses, vln=vln)
    t = attapply.ATTFST(filename)
    return [w[0] for w in t.apply(inp)]


def get_regex(inp, flex=False, isoglosses=False, vln=False):
    forms = generate_forms(inp, flex=flex, isoglosses=isoglosses, vln=vln)
    trie = Trie()
    for w in forms:
        trie.add(w)
    return trie.pattern()


if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument('task',
                           help="One of {'match', 'generate', 'pattern}")
    argparser.add_argument('input')
    argparser.add_argument('--dict_form', '-d', required=False)
    argparser.add_argument('--flex', '-f', action='store_true')
    argparser.add_argument('--vln', '-v', action='store_true')
    argparser.add_argument('--iso', '-i', action='store_true')

    args = argparser.parse_args()
    task = args.task
    in_word = args.input

    if task == 'match':
        if args.dict_form is None:
            raise ValueError("Need to pass a --dict_form to test matching.")
        match_word = args.dict_form
        if match(in_word,
                 match_word,
                 flex=args.flex,
                 isoglosses=args.iso,
                 vln=args.vln):

            print("'{}' Matched '{}'".format(in_word, match_word))

    elif task == 'generate':
        print("Words generated by '{}':".format(in_word))
        print("\n".join(generate_forms(in_word,
                                       flex=args.flex,
                                       isoglosses=args.iso,
                                       vln=args.vln)))

    elif task == 'pattern':
        print(get_regex(in_word,
                        flex=args.flex,
                        isoglosses=args.iso,
                        vln=args.vln))

    else:
        raise ValueError("task can only be 'match' or 'generate'.")

